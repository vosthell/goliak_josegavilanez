/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmPagosEliminar.java
 *
 * Created on 14-jun-2012, 14:39:19
 */
package pago;

import clases.clsAuditoria;
import clases.clsCtasCobrar;
import clases.clsPago;
import clases.clsParametros;
import clases.clsUtils;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author CKaiser
 */
public class frmPagosEliminar extends javax.swing.JDialog {
    MiModelo dtmData = new MiModelo();
    clsPago objPago = new clsPago();
    clsUtils objUtils = new clsUtils();
    clsAuditoria objAuditoria = new clsAuditoria();
    clsCtasCobrar objCtasCobrar = new clsCtasCobrar();
    clsParametros objParametros = new clsParametros();
    
    int idCabeceraMovi = 0;
    int tipoDocu = 0;
    
    /** Creates new form frmPagosEliminar */
    public frmPagosEliminar(java.awt.Frame parent, boolean modal, int idCabecera, int tipoDoc) {
        super(parent, modal);
        initComponents();
        
        idCabeceraMovi = idCabecera;
        tipoDocu = tipoDoc;
        dtmData.addColumn("Nº");
        dtmData.addColumn("id_pago");
        dtmData.addColumn("Usuario que recibió el pago");
        dtmData.addColumn("Fecha");
        dtmData.addColumn("Observación");    
        dtmData.addColumn("Valor");   
        objUtils.setOcultarColumnasJTable(this.tblData, new int[]{1}); 
        
       llenarTabla();
    }
    
    public class MiModelo extends DefaultTableModel
    {
       @Override
       public boolean isCellEditable (int row, int column)
       {
           // Aquí devolvemos true o false según queramos que una celda
           // identificada por fila,columna (row,column), sea o no editable
          /* if (column == 3)
              return true;*/

           return false;
       }
    } 
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(stinventario.STInventarioApp.class).getContext().getResourceMap(frmPagosEliminar.class);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tblData.setModel(dtmData);
        tblData.setName("tblData"); // NOI18N
        jScrollPane1.setViewportView(tblData);

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnImprimir.setText(resourceMap.getString("btnImprimir.text")); // NOI18N
        btnImprimir.setEnabled(false);
        btnImprimir.setName("btnImprimir"); // NOI18N
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnImprimir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 231, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnImprimir))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    int fila = tblData.getSelectedRow();
    if(fila<0)
    {
        JOptionPane.showMessageDialog(this, "No ha seleccionado ningún pago", "Atención", JOptionPane.ERROR_MESSAGE);
    }
    else
    {
        boolean exito= false;
        boolean exito2 = false;
        String tipo = "";

        int idPago = Integer.parseInt("" + tblData.getValueAt(fila, 1));
        Double valorPago = Double.parseDouble("" + tblData.getValueAt(fila, 5));

        int seleccion = JOptionPane.showOptionDialog(
                                        this, // Componente padre
                                        "¿Desea eliminar el pago de: " + valorPago + "?", //Mensaje
                                        "Seleccione una opción", // Título
                                        JOptionPane.YES_NO_CANCEL_OPTION,
                                        JOptionPane.QUESTION_MESSAGE,
                                        null,    // null para icono por defecto.
                                        new Object[] { "Si", "No"},    // null para YES, NO y CANCEL
                                        "Si");
        if (seleccion != -1)
        {
            if((seleccion + 1)==1)
            {
                try
                {    
                    if(tipoDocu==1)
                    { 
                        exito = objPago.eliminarPago(idPago);
                        //le suma lo eliminado a  la cuenta por cobrar
                        exito2 = objCtasCobrar.actualizarSaldoHistoSumar(idCabeceraMovi, valorPago);
                        tipo = "DE NOTA DE ENTREGA";
                    }
                    else if(tipoDocu==2)
                    { 
                        exito = objPago.eliminarPagoFactura(idPago);
                        //le suma lo eliminado a  la cuenta por cobrar
                        exito2 = objCtasCobrar.actualizarSaldoHistoSumar_factura(idCabeceraMovi, valorPago);
                        tipo = "DE FACTURA";
                    }


                    if ((exito) && (exito2))
                    {
                        JOptionPane.showMessageDialog(this, "Datos eliminados con éxito", "Atención!", JOptionPane.INFORMATION_MESSAGE);                
                        objAuditoria.insertarAuditoria("frmPagosEliminar", "ELIMINO PAGO: "
                                                + idPago + ", " + tipo
                                                + " , VALOR: " + valorPago, "3");
                        llenarTabla();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "Error al ingresar la información", "Atención!", JOptionPane.ERROR_MESSAGE);
                        objAuditoria.insertarAuditoria("frmPagosEliminar", "INTENTÓ ELIMINAR PAGO: "
                                                + idPago + ", " + tipo
                                                + " , VALOR: " + valorPago, "3");
                    }

                }
                catch(Exception e)
                {
                    System.out.println("ERROR: " + e.toString());
                }
            }
            else
            {
                //JOptionPane.showMessageDialog(this, "NO", "Atención!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}//GEN-LAST:event_jButton1ActionPerformed

private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
 int fila = tblData.getSelectedRow();
    if(fila<0)
    {
        JOptionPane.showMessageDialog(this, "No ha seleccionado ningún pago", "Atención", JOptionPane.ERROR_MESSAGE);
    }
    else
    {
        boolean exito= false;
        boolean exito2 = false;
        String tipo = "";

        int idPago = Integer.parseInt("" + tblData.getValueAt(fila, 1));
        Double valorPago = Double.parseDouble("" + tblData.getValueAt(fila, 5));

        int seleccion = JOptionPane.showOptionDialog(
                                        this, // Componente padre
                                        "¿Desea REIMPRIMIR el RECIBO de pago de: " + valorPago + "?", //Mensaje
                                        "Seleccione una opción", // Título
                                        JOptionPane.YES_NO_CANCEL_OPTION,
                                        JOptionPane.QUESTION_MESSAGE,
                                        null,    // null para icono por defecto.
                                        new Object[] { "Si", "No"},    // null para YES, NO y CANCEL
                                        "Si");
        if (seleccion != -1)
        {
            if((seleccion + 1)==1)
            {
                try
                {    
                    if(tipoDocu==1)
                    { 
                        //exito = objPago.eliminarPago(idPago);
                        //le suma lo eliminado a  la cuenta por cobrar
                        //exito2 = objCtasCobrar.actualizarSaldoHistoSumar(idCabeceraMovi, valorPago);
                        tipo = "DE NOTA DE ENTREGA";
                        
                        reimpresion(idPago);
                         JOptionPane.showMessageDialog(this, "Pago impreso con éxito", "Atención!", JOptionPane.INFORMATION_MESSAGE);
                         dispose();
                    }
                    else if(tipoDocu==2)
                    { 
                        //exito = objPago.eliminarPagoFactura(idPago);
                        //le suma lo eliminado a  la cuenta por cobrar
                        //exito2 = objCtasCobrar.actualizarSaldoHistoSumar_factura(idCabeceraMovi, valorPago);
                        tipo = "DE FACTURA";
                    }


                    /*if ((exito) && (exito2))
                    {
                        JOptionPane.showMessageDialog(this, "Datos eliminados con éxito", "Atención!", JOptionPane.INFORMATION_MESSAGE);                
                        objAuditoria.insertarAuditoria("frmPagosEliminar", "ELIMINO PAGO: "
                                                + idPago + ", " + tipo
                                                + " , VALOR: " + valorPago, "3");
                        llenarTabla();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "Error al ingresar la información", "Atención!", JOptionPane.ERROR_MESSAGE);
                        objAuditoria.insertarAuditoria("frmPagosEliminar", "INTENTÓ ELIMINAR PAGO: "
                                                + idPago + ", " + tipo
                                                + " , VALOR: " + valorPago, "3");
                    }*/

                }
                catch(Exception e)
                {
                    System.out.println("ERROR: " + e.toString());
                }
            }
            else
            {
                //JOptionPane.showMessageDialog(this, "NO", "Atención!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}//GEN-LAST:event_btnImprimirActionPerformed
    
    public void reimpresion(int pv_idPago)
    {
            FileWriter fichero = null;
                        PrintWriter pw = null;
                        ArrayList<clsPago> dataPago = objPago.consultaDataPagoDetalle(pv_idPago);
                        try
                        {
                            //ACTUALIZAR DATOS DEL PAGO
                            //OBTENER IDCAJAOPERACION ACTUAL, OSEA QUE  NO ESTA CERRADA
                            //String idCajaAbierta = objCaja.obtenerCajaAbierta(main.idUser);
                            //objPago.actualizarDataPago(idPago_publica, idCajaAbierta, main.idUser);
                            dataPago = objPago.consultaDataPagoDetalle(pv_idPago);
                            //RESTAR SALDO
                            //ACTUALIZAR SALDO
                            int idCtaCobrar = dataPago.get(0).getIdCtaCobrar();
                            Double valor = dataPago.get(0).getValor();
                            System.out.println("Valor: " + valor);
                            String fecha_cobro = dataPago.get(0).getFechaCobro().substring(0, 16);   

                            objCtasCobrar.actualizarSaldoNuevo(idCtaCobrar, objUtils.redondear(valor));
                             //OBTENER SALDO SI SALDO ES  CERO CANCELO DEUDA
                            Double saldo = objCtasCobrar.consultarSaldoCta("" + idCtaCobrar);
                            System.out.println("Saldo: " + saldo);
                            if((saldo==0) || (saldo==0.00) ||(saldo<0))
                            {
                                //REGISTRAR QUE FECHA QUEDO CANCELADO O EN CERO
                                objCtasCobrar.registrarCancelacionNuevo(idCtaCobrar);
                            }    
                            System.out.println("Valor2:"+valor);
                            fichero = new FileWriter(objUtils.HostSystem + objUtils.archivoPrint);
                            /******************************************************************************************/
                            pw = new PrintWriter(fichero);                                                           //*  
                            pw.println(objParametros.consultaValor("print_pago_linea1") + "RECIBO DE COBRO/NE");
                            pw.println(objParametros.consultaValor("print_pago_linea2") + "N° " + pv_idPago);
                            pw.println(objParametros.consultaValor("print_pago_linea3"));
                            pw.println(objParametros.consultaValor("print_pago_linea4"));
                            pw.println(objParametros.consultaValor("print_pago_linea5"));
                            pw.println(objParametros.consultaValor("print_pago_linea6"));
                            //pw.println("");
                            //35 lineas
                            /********************CABECERA**********/
                            pw.println("");
                            pw.println("");

                            pw.println("RECIBI DE : " + dataPago.get(0).getNombreCliente());
                            pw.println("LA CANTIDAD DE: " + valor + " ***DOLARES");
                            pw.println("POR CONCEPTO DE: " + dataPago.get(0).getReferencia());
                            pw.println("CODIGO NE: " + dataPago.get(0).getIdCabeceraMovi());
                            pw.println("CODIGO DEUDA: " + dataPago.get(0).getIdCtaCobrar());
                            if (saldo<0)
                                saldo = 0.00;
                            pw.println("VALOR PENDIENTE: " + saldo);
                            pw.println("");
                            /******************************************************************************************/
                            pw.println(objParametros.consultaValor("print_pago_linea7")+ " " + fecha_cobro);

                            //pw.println("");
                            //pw.println("");
                            pw.println("");
                            pw.println("");
                            pw.println("");

                            //cuadrarlo a cierto numero de caracteres
                            String nombre = "";
                            if(dataPago.get(0).getNombreCliente().toString().length()>30)
                                nombre = dataPago.get(0).getNombreCliente().toString().substring(0, 30);
                            else
                            {
                                nombre = dataPago.get(0).getNombreCliente();
                                do{
                                    nombre = nombre + " ";
                                }while(nombre.length()<30);

                            }       
                            //NOMBRE DEL COBRADOR
                            String nombreUsuario = "";
                            if(dataPago.get(0).getNombreCobrador().toString().length()>30)
                                nombreUsuario = dataPago.get(0).getNombreCobrador().toString().substring(0, 30);
                            else
                            {
                                nombreUsuario = dataPago.get(0).getNombreCobrador();
                                do{
                                    nombreUsuario = nombreUsuario + " ";
                                }while(nombreUsuario.length()<30);

                            }       
                            /******************************************************************************************/
                            pw.println("------------------------------              -----------------------------");
                            pw.println("      FIRMA DEL CLIENTE                         FIRMA DEL RECAUDADOR");
                                        /****************************/              /****************************/
                            pw.println(nombre + "              " + nombreUsuario);
                            pw.println("");
                            pw.println("Generado por: " + dataPago.get(0).getNombreUsuario());        
                            pw.println("");
                            pw.println("IMPORTANTE: Estimado usuario, por favor guarde este recibo, es el unico ");
                            pw.println("comprobante que Ud. tiene para confirmar su pago realizado.");
                            pw.println("");

                            Runtime aplicacion = Runtime.getRuntime(); 
                            aplicacion.exec("cmd.exe /K "+ objUtils.HostSystem + objUtils.archivoImprimir3); 


                        }
                        catch (Exception e) 
                        {
                            System.out.println(e.toString());
                            e.printStackTrace();
                        } 
                        finally 
                        {
                           try {
                           // Nuevamente aprovechamos el finally para 
                           // asegurarnos que se cierra el fichero.
                           if (null != fichero)
                              fichero.close();
                           } catch (Exception e2) {
                              System.out.println(e2.toString());
                              //e2.printStackTrace();
                           }
                        }

                        /*ABRIR LA CAJA, MANDO A IMPRIMIR CODIGO ESPECIAL A LA IMPRESORA TMU*/
                        FileWriter fichero2 = null;
                        PrintWriter pw2 = null;
                        try
                        {

                            fichero2 = new FileWriter(objUtils.HostSystem + objUtils.archivoPrint2);
                            pw2 = new PrintWriter(fichero2);
                            byte[] bit = new byte[1];
                            bit[0] = (byte)27;
                            String a = new String(bit);
                            //byte[] bit = new byte[1];
                            bit[0] = (byte)112;
                            String b = new String(bit);            
                            pw2.println(a + b + 0);
                            /*******ABRIR CAJON****/
                            Runtime aplicacion2 = Runtime.getRuntime();             
                            aplicacion2.exec("cmd.exe /K "+ objUtils.HostSystem + objUtils.abrirCaja); 
                        } 
                        catch (Exception e) 
                        {
                            System.out.println(e.toString());
                            e.printStackTrace();
                        } 
                        finally 
                        {
                           try {
                           // Nuevamente aprovechamos el finally para 
                           // asegurarnos que se cierra el fichero.
                           if (null != fichero2)
                              fichero2.close();
                           } catch (Exception e2) {
                              System.out.println(e2.toString());
                              //e2.printStackTrace();
                           }
                        }
                        /*FIN - ABRIR LA CAJA, MANDO A IMPRIMIR CODIGO ESPECIAL A LA IMPRESORA TMU*/    
    }

    public void llenarTabla()
    {
        objUtils.vaciarTabla(dtmData);
        ArrayList<clsPago> dataPago = null;
        
        if(tipoDocu==1)
            dataPago = objPago.consultarDataPagos(idCabeceraMovi);
        else if (tipoDocu==2)
            dataPago = objPago.consultarDataPagosFactura(idCabeceraMovi);
        
        for(int i=0;i<dataPago.size();i=i+1)
        {
            Object[] nuevaFila = {i+1, 
                dataPago.get(i).getIdPago(), 
                dataPago.get(i).getNombreUsuario(), 
                dataPago.get(i).getFechaPago(),
                dataPago.get(i).getReferencia(),
                dataPago.get(i).getValor()};               
            dtmData.addRow(nuevaFila); 
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPagosEliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPagosEliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPagosEliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPagosEliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                frmPagosEliminar dialog = new frmPagosEliminar(new javax.swing.JFrame(), true, 0, 0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblData;
    // End of variables declaration//GEN-END:variables
}
